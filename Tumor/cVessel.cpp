#include "cVessel.h"

#include "dimension.h"

#include "PositionFinder.h"

#include <iostream>

#include <fstream>

#pragma warning( disable: 4129 )

// Since we want to get the number of the last vessel plus one, we put this number 1 more than the number of last vessel. This way not only we can use int integers,
// but also we can get the number past last element without adding 1 to it.
int cVessel::quantity = 0;
double cVessel::mu_plasma = 1.2E-3; // Viscosity of Plasma which is the same for all capillaries (Pa.s)

double cVessel::taw_ref = 0.103;
double cVessel::q_ref = 9.42873E-13;
double cVessel::k_p = 0.5;
double cVessel::k_m = 0.12;
double cVessel::k_s = 0.35;
double cVessel::shear_ref = 20;
double cVessel::dt = 0.;

extern double pi;

extern std::ofstream printer;
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// CONSTRUCTOR ----------------------------------------------------------------------------------------------------------------------------------------------------------------------
cVessel::cVessel( int num ) {

	identity = num;

	++quantity;

	TEC_x = 0;
	TEC_y = 0;

	x_st = 0;
	y_st = 0;

	unit_length = 0;
	l = 0.0;
	d = 10.0;
	r = 0.0;
	q = 0.0;
	hemaetocrit = 0.0;
	e = 0.0;
	mu_45 = 0.0;
	mu_rel = 0.0;
	C = 0.0;
	mu = 4E-3; // Pa.s
	s_node = 0;
	e_node = 0;
	age = 0;
	prohibited_direction = '\0';
	forced_direction = '\0';
	mother_vessel = 0;
	place_on_s_node = 0;
	place_on_e_node = 0;
	inlet_status = 0;
	outlet_status = 1;

	s_wss = 0.;
	taw_w = 0.;
	p = 0.;
	taw_e = 0.;
	s_p = 0.;
	s_m = 0.;

	prln = 0.;

	stationary_time = 0;

	for ( int i = 0; i < 3; ++i ) {

		old_d[i] = 0.;

		old_mu[i] = 0.;

	};

	for ( int i = 0; i != a_dim; ++i )
		for ( int j = 0; j != a_dim; ++j ) {

			path[i][j] = 0;
			pre_path_storer[i][j] = '\0';
			path_storer[i][j] = '\0';

		};

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// gets two integers as X position and Y position of the Tip Endothelial Cell and assigns it to vessel's TEC ------------------------------------------------------------------------
void cVessel::SetTipCellPosition( int x, int y ) {

	TEC_x = x;

	TEC_y = y;

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// copies the Tip Endothelial Cell position of another vessel to this vessel --------------------------------------------------------------------------------------------------------
void cVessel::SetTipCellPosition( cVessel& v ) {

	this->TEC_x = v.TEC_x;

	this->TEC_y = v.TEC_y;

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// gets i and j positions and direction which the vessel will move in the next time step and assigns the direction to the vessel at desired location --------------------------------
void cVessel::SetPathStorer( int i, int j, unsigned char dir ) {

	path_storer[i][j] = dir;

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// gets i and j positions and the direction where the vessel was in the previous time step and assigns the direction to the vessel at desired location ------------------------------
void cVessel::SetPrePathStorer( int i, int j, unsigned char dir ) {

	pre_path_storer[i][j] = dir;

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// gets the length sweeped in one time step and calculates the length of the vessel -------------------------------------------------------------------------------------------------
void cVessel::SetLength( double vessel_length ) {

	l = unit_length * vessel_length;

};
// ==================================================================================================================================================================================


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Calculates hemaetocrit function which is in mu rel equation ----------------------------------------------------------------------------------------------------------------------
void cVessel::SetResistance() {

	r = ( -128 * mu * l ) / ( pi * pow( ( d * 1E-6 ), 4 ) );

};

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Calculates hemaetocrit function which is in mu rel equation ----------------------------------------------------------------------------------------------------------------------
double cVessel::HemaetocritFunction() {

	double hf;

	hf = pow( ( 1 - hemaetocrit ), C ) - 1;

	hf /= pow( ( 1 - 0.45 ), C ) - 1;

	return hf;

};
// ==================================================================================================================================================================================


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Caluclates Mu rel of the capillary -----------------------------------------------------------------------------------------------------------------------------------------------
void cVessel::SetMu45() {

	mu_45 = ( 6 * exp( -0.085 * d ) ) + 3.2 - ( 2.44 * exp( -0.06 * pow( d, 0.0645 ) ) );

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Caluclates Mu rel of the capillary -----------------------------------------------------------------------------------------------------------------------------------------------
void cVessel::SetMu() {

	mu = mu_rel * mu_plasma;

};
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Caluclates Mu rel of the capillary -----------------------------------------------------------------------------------------------------------------------------------------------
void cVessel::SetMuRel( double hf ) {

	mu_rel = 1 + ( ( mu_45 - 1 ) * hf * pow( (d/(d-1.1)), 2 ) );

	mu_rel*= pow( (d/(d-1.1)), 2 );

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Caluclates C coefficient which is used to calculate Hemaetocrit function ---------------------------------------------------------------------------------------------------------
void cVessel::SetC() {

	C = ( 0.8 + exp( -0.075 * d ) ) * ( -1 + ( 1 / ( 1 + ( 1E-11 * pow( d, 12 ) ) ) ) );

	C += 1 / ( 1 + ( 1E-11 * pow( d, 12 ) ) );

};
// ==================================================================================================================================================================================


// ******************************************************************************* MOVEMENTS ****************************************************************************************

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void cVessel::MoveRight( int i, int j ) {
	
	++TEC_x;
	
	path[i+1][j] = 1;

	IncreaseLength();

	IncreaseAge();

	// I store the direction and the path of tip cell to use it to find its path when necessory
	path_storer[i][j] = 'r';

	// I store the previous place of tip cell
	pre_path_storer[i+1][j] = 'l';

	// holds the direction for new movement to make its movement in the desired direction zero in next time step

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void cVessel::MoveLeft( int i, int j ) {
	
	--TEC_x;
	
	path[i-1][j] = 1;

	IncreaseLength();

	IncreaseAge();

	path_storer[i][j] = 'l';

	pre_path_storer[i-1][j] = 'r';

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void cVessel::MoveUp( int i, int j ) {
	
	++TEC_y;
	
	path[i][j+1] = 1;

	IncreaseLength();

	IncreaseAge();

	path_storer[i][j] = 'u';

	pre_path_storer[i][j+1] = 'd';

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void cVessel::MoveDown( int i, int j ) {
	
	--TEC_y;
	
	path[i][j-1] = 1;

	IncreaseLength();

	IncreaseAge();

	path_storer[i][j] = 'd';

	pre_path_storer[i][j-1] = 'u';

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// starts the vessel to the direction of the point given in the input parameters ----------------------------------------------------------------------------------------------------
void cVessel::StartVessel( int i, int j, unsigned char dir ) {

	switch( dir ) {

	case 'd' :

		// I want to have the starting and ending point of vessels be the same, because whe they are to be concatenated, it will be easy
		path[i][j] = 1;
		pre_path_storer[i][j] = 's';
		path_storer[i][j] = 'd';
		IncreaseLength();
		IncreaseAge();

		x_st = i;
		y_st = j;

		path[i][j-1] = 1;
		pre_path_storer[i][j-1] = 'u';
		TEC_x = i;
		TEC_y = j - 1;

		prohibited_direction = 'u';

		inlet_status = 0;

		break;

	case 'u' :

		path[i][j] = 1;
		pre_path_storer[i][j] = 's';
		path_storer[i][j] = 'u';
		IncreaseLength();
		IncreaseAge();

		x_st = i;
		y_st = j;

		path[i][j+1] = 1;
		pre_path_storer[i][j+1] = 'd';
		TEC_x = i;
		TEC_y = j + 1;

		prohibited_direction = 'd';

		inlet_status = 0;

		break;

	case 'l' :

		path[i][j] = 1;
		pre_path_storer[i][j] = 's';
		path_storer[i][j] = 'l';
		IncreaseLength();
		IncreaseAge();

		x_st = i;
		y_st = j;

		path[i-1][j] = 1;
		pre_path_storer[i-1][j] = 'r';
		TEC_x = i - 1;
		TEC_y = j;

		prohibited_direction = 'r';

		inlet_status = 0;

		break;

	case 'r' :

		path[i][j] = 1;
		pre_path_storer[i][j] = 's';
		path_storer[i][j] = 'r';
		IncreaseLength();
		IncreaseAge();

		x_st = i;
		y_st = j;

		path[i+1][j] = 1;
		pre_path_storer[i+1][j] = 'l';
		TEC_x = i + 1;
		TEC_y = j;

		prohibited_direction = 'l';

		inlet_status = 0;

		break;

	default:

		printf( "\nOOPS\! No Direction MACTHES THE DEFINED DIRECTIONS FOR MOVEMENT" );

		printf( "\n" );
		system("pause");

	};

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// starts the vessel from the prescribed point by i and j ---------------------------------------------------------------------------------------------------------------------------
void cVessel::StartVessel( int i, int j) {

	path[i][j] = 1;
	pre_path_storer[i][j] = 's';
	TEC_x = i;
	TEC_y = j;

	x_st = i;
	y_st = j;

	inlet_status = 0;

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// stops the vessel from growing in the desired point of i and j --------------------------------------------------------------------------------------------------------------------
void cVessel::StopGrowing( int i, int j ) {
	
	TEC_x = 0;

	TEC_y = 0;

	path_storer[i][j] = 's';

	outlet_status = 0;

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// stops the vessel from growing ----------------------------------------------------------------------------------------------------------------------------------------------------
void cVessel::StopGrowing() {
	
	TEC_x = 0;

	TEC_y = 0;

	outlet_status = 0;

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// copies the starting node of the input vessel to the vessel -----------------------------------------------------------------------------------------------------------------------
void cVessel::CopyStartNode( cVessel& v ) {

		this->s_node = v.s_node;

		this->place_on_s_node = v.place_on_s_node;

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// copies the finishing node of the input vessel to the vessel ----------------------------------------------------------------------------------------------------------------------
void cVessel::CopyEndNode( cVessel& v ) {

		this->e_node = v.e_node;

		this->place_on_e_node = v.place_on_e_node;

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// copies the information of the input vessel to the vessel -------------------------------------------------------------------------------------------------------------------------
void cVessel::CopyGrowingStatus( cVessel& v ) {

	this->TEC_x = v.TEC_x;
	this->TEC_y = v.TEC_y;

	this->age = v.age;

	this->prohibited_direction = v.prohibited_direction;

	this->forced_direction = v.forced_direction;

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// subtracts unit length of input vessel from this vessel
void cVessel::SubtractLength( cVessel& v ) {

	this->unit_length -= v.unit_length;

};
// ==================================================================================================================================================================================


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// this function adds ID numbers of vessels which this vessel must not encounter to the vector of prohibiteds
void cVessel::AddToProhibiteds( int v ) {

	prohibiteds.push_back( v );

};
// ==================================================================================================================================================================================


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// this function checks the prohibiteds vector to see if the vessels in this vector exist in the desired location or not
bool cVessel::CheckNeighbors( int i, int j, std::vector<cVessel> vec ) {

	int pos;

	bool check = false;

	for ( size_t k = 0; k < prohibiteds.size(); ++k ) {

		pos = PositionFinder( vec, prohibiteds[k] );

		if ( vec[pos].GetPath( i, j ) )
			check = true;

	};

	return check;

};
// ==================================================================================================================================================================================


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// this function calculates the wall shear stress exerted on the wall by blood flow
void cVessel::SolveWallShearStressStimulus() {

	taw_w = 10 * 32 * mu * abs(q) / ( pi * pow( ( d * 1E-6 ), 3 ) );

	s_wss = log10( taw_w + taw_ref );

};
// ==================================================================================================================================================================================


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// this function calculates the wall shear stress exerted on the wall by intravascular pressure
void cVessel::SolvePressureStimulus() {

	double pre = p / 133.333333333;

	taw_e = 100 - 86 * exp( -5000 * pow( ( log10(log10(p)) ), 5.4 ) );

	s_p = -log10( taw_e );

	s_p *= k_p;

};
// ==================================================================================================================================================================================


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// this function calculates the wall shear stress exerted on the wall by Metabolic Stimulus
void cVessel::SolveMetabolicStimulus() {

	if ( hemaetocrit == 0 ) {
		
		s_m = 0;

	}

	else {

		s_m = k_m * log10( ( q_ref / ( q * hemaetocrit ) ) + 1 );

	};

};
// ==================================================================================================================================================================================


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// this function calculates the modification needed to apply to each capillary
void cVessel::FindDeltaR() {

	delta_r = ( s_wss + s_p + s_m - k_s ) * ( d/2) * dt;

};
// ==================================================================================================================================================================================


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// keeps the diameter in a variable to compare with updated diameter ----------------------------------------------------------------------------------------------------
void cVessel::AddToOldDiameters( double d ) {

	old_d[0] = old_d[1];

	old_d[1] = old_d[2];

	old_d[2] = d;

};
// ==================================================================================================================================================================================


void cVessel::AddToOldMus( double mu ) {

	old_mu[0] = old_mu[1];

	old_mu[1] = old_mu[2];

	old_mu[2] = mu;

};


bool cVessel::CompareToOldDiameters( double d ) {

	if ( ( abs( d - old_d[0] ) < 0.0001 ) || ( abs( d - old_d[1] ) < 0.0001 ) || ( abs( d - old_d[2] ) < 0.0001 ) ) {
		
		/*printer << "Entered if and v no is " << identity << " and diameter is " << d << std::endl;

		printer << " old d are " << old_d[0] << ", " << old_d[1] << ", " << old_d[2] << std::endl;*/

		return true;

	}
	else {

		//printer << "Entered if and v no is " << identity << " and diameter is " << d << std::endl;

		//printer << " old d are " << old_d[0] << ", " << old_d[1] << ", " << old_d[2] << std::endl;

		return false;

	};
		

};


bool cVessel::CompareToOldMus( double mu ) {

	if ( ( abs( mu - old_mu[0] ) < 0.0001 ) || ( abs( mu - old_mu[1] ) < 0.0001 ) || ( abs( mu - old_mu[2] ) < 0.0001 ) )
		return true;
	else
		return false;
		

};


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// starts the vessel to the direction of the point given in the input parameters ----------------------------------------------------------------------------------------------------
void cVessel::StartVesselB( int i, int j, unsigned char dir ) {

	switch( dir ) {

	case 'd' :

		// I want to have the starting and ending point of vessels be the same, because whe they are to be concatenated, it will be easy
		path[i][j] = 1;
		pre_path_storer[i][j] = 's';
		path_storer[i][j] = 'd';
		IncreaseLength();
		IncreaseAge();

		x_st = i;
		y_st = j;

		path[i][j-1] = 1;
		pre_path_storer[i][j-1] = 'u';
		TEC_x = i;
		TEC_y = j - 1;

		inlet_status = 0;

		break;

	case 'u' :

		path[i][j] = 1;
		pre_path_storer[i][j] = 's';
		path_storer[i][j] = 'u';
		IncreaseLength();
		IncreaseAge();

		x_st = i;
		y_st = j;

		path[i][j+1] = 1;
		pre_path_storer[i][j+1] = 'd';
		TEC_x = i;
		TEC_y = j + 1;

		inlet_status = 0;

		break;

	case 'l' :

		path[i][j] = 1;
		pre_path_storer[i][j] = 's';
		path_storer[i][j] = 'l';
		IncreaseLength();
		IncreaseAge();

		x_st = i;
		y_st = j;

		path[i-1][j] = 1;
		pre_path_storer[i-1][j] = 'r';
		TEC_x = i - 1;
		TEC_y = j;

		inlet_status = 0;

		break;

	case 'r' :

		path[i][j] = 1;
		pre_path_storer[i][j] = 's';
		path_storer[i][j] = 'r';
		IncreaseLength();
		IncreaseAge();

		x_st = i;
		y_st = j;

		path[i+1][j] = 1;
		pre_path_storer[i+1][j] = 'l';
		TEC_x = i + 1;
		TEC_y = j;

		inlet_status = 0;

		break;

	default:

		printf( "\nOOPS\! No Direction MACTHES THE DEFINED DIRECTIONS FOR MOVEMENT\n" );

		system("pause");

	};

};
// ==================================================================================================================================================================================

// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// this function sets the value for proliferation 
void cVessel::SetPrln( double prl ) {

	prln = prl;

};

// ==================================================================================================================================================================================


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// this function copies all parameters of a vessel tp this vessel
void cVessel::CopyVessel( cVessel& ves ) {

	this->q = ves.q;

	this->d = ves.d;

	this->e = ves.e;

	this->hemaetocrit = ves.hemaetocrit;

	this->mu = ves.mu;

	this->taw_w = ves.taw_w;

};
// ==================================================================================================================================================================================


// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// this function normalizes the shear rate of vessels -------------------------------------------------------------------------------------------------------------------------------
void cVessel::NormalizeShear() {

	norm_shear = taw_w / shear_ref;

	if ( norm_shear > 1 )
		norm_shear = 1;

};
// ----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// prints all the information of the vessel to the outstream prescribed by the user -------------------------------------------------------------------------------------------------
void cVessel::Print( std::ofstream& writer ) {

	writer << "\nId number is " << identity << std::endl;

	writer << "Starting node is " << s_node << std::endl;

	writer << "Finishing node is " << e_node << std::endl;

	writer << "Place on starting node is " << place_on_s_node << std::endl;

	writer << "Place on finishing node is " << place_on_e_node << std::endl;

	writer << "Inlet status is " << inlet_status << std::endl;

	writer << "Outlet status is " << outlet_status << std::endl;

};
// ==================================================================================================================================================================================

//******************************************************************** FINISH *******************************************************************************************************